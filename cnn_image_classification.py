# -*- coding: utf-8 -*-
"""cnn-image-classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18aCpvpK29RLKPfte2WoPML0U1klnvQ82
"""


"""Libraries"""

import tensorflow as tf
import matplotlib.pyplot as plt
import cv2
import os
import numpy as np
import PIL
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.preprocessing import image
from tensorflow.keras.optimizers import RMSprop

"""Datasets path"""

datasetPath = '/dataset/'

"""Test dataset path image import"""

img = image.load_img(datasetPath + 'train/mug/20201014_173420.jpg')
plt.imshow(img)

cv2.imread(datasetPath + '/train/mug/20201014_173420.jpg').shape

"""Transform images format to keras format"""

train = ImageDataGenerator(rescale= 1/255)
validation = ImageDataGenerator(rescale= 1/255)

train_dataset = train.flow_from_directory(datasetPath + 'train/',
                                          target_size = (200, 200),
                                          batch_size = 363,
                                          class_mode = 'binary')

validation_dataset = train.flow_from_directory(datasetPath + 'validation/',
                                          target_size = (200, 200),
                                          batch_size = 61,
                                          class_mode = 'binary')

"""Model's Layers definition (https://keras.io/guides/sequential_model/)"""

model = tf.keras.models.Sequential([ tf.keras.layers.Conv2D(16, (3, 3), activation = 'relu', input_shape = (200, 200, 3)),
                                    tf.keras.layers.MaxPool2D(2, 2),
                                    #
                                    tf.keras.layers.Conv2D(32, (3, 3), activation = 'relu'),
                                    tf.keras.layers.MaxPool2D(2, 2),
                                    #
                                    tf.keras.layers.Conv2D(64, (3, 3), activation = 'relu'),
                                    tf.keras.layers.MaxPool2D(2, 2),
                                    ##
                                    tf.keras.layers.Flatten(),
                                    ##
                                    tf.keras.layers.Dense(512, activation = 'relu'),
                                    ##
                                    tf.keras.layers.Dense(1, activation = 'sigmoid')
                                    ])

model.summary()

"""Model configuration"""

model.compile(loss= 'binary_crossentropy',
              optimizer = RMSprop(lr=0.001),
              metrics = ['accuracy'])

"""Start training"""

model_fit = model.fit(train_dataset,
                      # steps_per_epoch = 1,
                      epochs = 1,
                      validation_data = validation_dataset)

"""Classes indices"""

validation_dataset.class_indices

"""Prediction"""

dir_path = datasetPath + '/test'

for i in os.listdir(dir_path):
  img = image.load_img(dir_path + '//' + i, target_size=(200, 200))
  plt.imshow(img)
  plt.show()

  x = image.img_to_array(img)
  x = np.expand_dims(x, axis =0)
  images = np.vstack([x])

  value = model.predict(images)


  print(value)
  if value == 0:
    print('Tem uma caneca!')
  else:
    print('NÃ£o tem caneca!')